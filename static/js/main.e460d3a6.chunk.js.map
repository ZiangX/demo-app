{"version":3,"sources":["GetAccountInfomation.js","App.js","reportWebVitals.js","index.js"],"names":["getAccountInfomation","type","token","a","fetch","method","headers","Authorization","res","console","log","body","json","App","useState","stocks","setStocks","className","Table","responsive","map","stock","symbol","openQuantity","averageEntryPrice","currentPrice","openPnl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAoBMA,EAAoB,uCAAG,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACVC,MAAM,2FAAD,OACqEH,GAC3F,CACCI,OAAQ,MACRC,QAAS,CAGRC,cAAc,UAAD,OAAYL,MARA,cACtBM,EADsB,OAc5BC,QAAQC,IAAIF,EAAKA,EAAIG,MACrBF,QAAQC,IAAI,WAAYF,EAAII,QAfA,kBAgBrBJ,EAAII,QAhBiB,2CAAH,wD,OCyBXC,MAxCf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACPC,EADO,KAUd,OALAC,EALc,MAKJhB,EAAqB,YAFnB,sCAGXS,QAAQC,IAAIK,GAKZ,qBAAKE,UAAU,MAAf,SACC,wBAAQA,UAAU,aAAlB,SACC,eAACC,EAAA,EAAD,CAAOC,YAAU,EAAjB,UACC,gCACC,+BACC,0DACA,8CACA,2DACA,2DACA,mDAGF,gCACEJ,EAAOK,KAAI,SAACC,GAAD,OACX,+BACC,6BAAKA,EAAMC,SACX,6BAAKD,EAAME,eACX,6BAAKF,EAAMG,oBACX,6BAAKH,EAAMI,eACX,6BAAKJ,EAAMK,0BCvBJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e460d3a6.chunk.js","sourcesContent":["const getToken = async (tokenFromAccount) => {\r\n\tconst res = await fetch(\r\n\t\t`https://cors-anywhere.herokuapp.com/https://login.questrade.com/oauth2/token?grant_type=refresh_token&refresh_token=${tokenFromAccount}`,\r\n\t\t{\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t// \"Content-Type\": \"application/json\",\r\n\t\t\t\t// Accept: \"application/json\",\r\n\t\t\t\t// Authorization: \"Bearer Zjv3AeNkpu-QvtopoPF0lVJK6SHbsfGx0\",\r\n\t\t\t},\r\n\t\t\t// mode: \"cors\",\r\n\t\t\t// credentials: \"include\",\r\n\t\t}\r\n\t);\r\n\tconsole.log(\"res\", res);\r\n\tconsole.log(\"res.json\", res.json());\r\n\talert(res);\r\n\talert(res.json());\r\n};\r\n\r\nconst getAccountInfomation = async (type, token) => {\r\n\tconst res = await fetch(\r\n\t\t`https://cors-anywhere.herokuapp.com/https://api07.iq.questrade.com/v1/accounts/52130491/${type}`,\r\n\t\t{\r\n\t\t\tmethod: \"GET\",\r\n\t\t\theaders: {\r\n\t\t\t\t// \"Content-Type\": \"application/json\",\r\n\t\t\t\t// Accept: \"application/json\",\r\n\t\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t},\r\n\t\t\t// mode: \"cors\",\r\n\t\t\t// credentials: \"include\",\r\n\t\t}\r\n\t);\r\n\tconsole.log(res, res.body)\r\n\tconsole.log(\"position\", res.json());\r\n\treturn res.json()\r\n};\r\n\r\n\r\nexport { getToken, getAccountInfomation };\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { getToken, getAccountInfomation } from \"./GetAccountInfomation\";\nimport Table from \"react-bootstrap/Table\";\n\nfunction App() {\n\tconst [stocks, setStocks] = useState([]);\n\t// getToken(\"ZS4cGkYb9Py0AaIgjCOYwiM-KmomYbub0\")\n\tlet token = \"G5TllCgBZ_7YdCnpW2ZB6Xjx6Dop24cO0\";\n\t// let type\n\tsetStocks(getAccountInfomation(\"positions\", token));\n  console.log(stocks);\n\t// getAccountInfomation(\"positions\", token);\n\t// getAccountInfomation(\"positions\", token);\n\t// getAccountInfomation(\"positions\", token);\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<Table responsive>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>股票名称</th>\n\t\t\t\t\t\t\t<th>数量</th>\n\t\t\t\t\t\t\t<th>持有价/股</th>\n\t\t\t\t\t\t\t<th>市场价/股</th>\n\t\t\t\t\t\t\t<th>盈亏</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{stocks.map((stock) => (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{stock.symbol}</td>\n\t\t\t\t\t\t\t\t<td>{stock.openQuantity}</td>\n\t\t\t\t\t\t\t\t<td>{stock.averageEntryPrice}</td>\n\t\t\t\t\t\t\t\t<td>{stock.currentPrice}</td>\n\t\t\t\t\t\t\t\t<td>{stock.openPnl}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}