{"version":3,"sources":["api/getDataFromSpreadsheet.js","App.js","reportWebVitals.js","index.js"],"names":["getDataFromSpreadsheet","token","spreadsheetId","a","fetch","method","headers","Authorization","res","ok","json","values","shift","getGoogleApiAccessTokenByRefreshToken","access_token","console","log","App","state","stocks","activities","positions","selectedCategory","componentDidMount","forEach","symbol","qty","accountType","parseInt","setState","stockPositions","Table","responsive","striped","bordered","hover","size","Object","keys","length","entries","map","key","value","displaySelectedCategory","split","slice","filter","activity","date","price","substring","parseFloat","toFixed","selectInspectingCategory","Form","Group","Control","as","onChange","e","target","position","className","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f7364f6.chunk.js","sourcesContent":["// Using context api to get global token\r\nconst getDataFromSpreadsheet = async (token, spreadsheetId) => {\r\n  const res = await fetch(\r\n    `https://cors-anywhere.herokuapp.com/https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/Sheet1!A1:E`,\r\n    {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  );\r\n  if (res.ok) {\r\n    let { values } = await res.json();\r\n    // Remove the first element\r\n    values.shift();\r\n    return values;\r\n  }\r\n  return [];\r\n};\r\n\r\nconst getGoogleApiAccessTokenByRefreshToken = async () => {\r\n  const res = await fetch(\r\n    `https://cors-anywhere.herokuapp.com/https://oauth2.googleapis.com/token?client_id=735001424008-cseikg1urk24ihdcbcr2cir85gm3jgi5.apps.googleusercontent.com&client_secret=DFNvgdLNdPB06RDZLLKUgNy3&grant_type=refresh_token&refresh_token=1//0dXPC1b6oSTP9CgYIARAAGA0SNwF-L9IrSW6AUOFNhgxNubhNyIyif711644aqiDNPILwc836yCVDp-lrLnPRfSysk3hSo5Lzuls`,\r\n    { method: \"POST\" }\r\n  );\r\n  if (res.ok) {\r\n    let { access_token } = await res.json();\r\n    console.log(\"access_token\", access_token);\r\n    return access_token;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport { getDataFromSpreadsheet, getGoogleApiAccessTokenByRefreshToken };\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import { getToken, getAccountInfomation } from \"./api/GetAccountInfomation\";\nimport {\n  getDataFromSpreadsheet,\n  getGoogleApiAccessTokenByRefreshToken,\n} from \"./api/getDataFromSpreadsheet\";\nimport Table from \"react-bootstrap/Table\";\nimport Form from \"react-bootstrap/Form\";\n\nclass App extends React.Component {\n  state = {\n    stocks: [],\n    token: \"G5TllCgBZ_7YdCnpW2ZB6Xjx6Dop24cO0\",\n    activities: [],\n    positions: { \"Individual TFSA\": {}, \"Individual margin\": {} },\n    selectedCategory: \"\",\n  };\n\n  componentDidMount = async () => {\n    // Get google access_token from a spreadsheet cell\n    // const savedTokenSpreadsheetId = \"1g88oUCQWbxsOrqNbm_1CfmmOzByZGjLeVTvgp6dkR7Q\"\n    // var savedToken = await getDataFromSpreadsheet(\n    //   token, savedTokenSpreadsheetId, \"A1\"\n    // );\n\n    // If the api call is failed, getting a new access token by refresh token\n    var token = await getGoogleApiAccessTokenByRefreshToken();\n\n    // Call activities spreadsheet to get the data\n    const activitiesSpreadsheetId = \"1su0gzMy04WDCQZM7hZTPITwBNg5onGWnTo_NZWu_F3U\";\n    var activities = await getDataFromSpreadsheet(token, activitiesSpreadsheetId);\n\n    // [27737857, 52130491].map(accountNum => {\n    // \tlet stocks = await getAccountInfomation(accountNum, \"positions\");\n    // \tlet balance = await getAccountInfomation(accountNum, \"balances\");\n    // \tthis.setState({ stocks, balance });\n    // })\n    var positions = { \"Individual TFSA\": {}, \"Individual margin\": {} };\n    activities.forEach(([date, symbol, qty, price, accountType]) => {\n      if (symbol in positions[accountType]) {\n        positions[accountType][symbol] = parseInt(qty) + positions[accountType][symbol];\n      } else {\n        // 值得注意的是，所有的食物必须有数量，否则默认为1。例如 莲蓉包1份30只\n        positions[accountType][symbol] = parseInt(qty);\n      }\n    });\n    console.log(positions);\n    console.log(activities);\n    this.setState({ activities, positions });\n    // TODO Add rowNumber fetch function\n  };\n\n  stockPositions = () => (\n    <>\n      <Table responsive striped bordered hover size=\"lg\">\n        <thead>\n          <tr>\n            {/* <th>时间</th> */}\n            <th>名称</th>\n            <th>数量</th>\n            {/* <th>价格</th> */}\n            <th>所属账户</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(this.state.positions).length !== 0 &&\n            Object.entries(this.state.positions[\"Individual TFSA\"]).map(([key, value]) => {\n              if (value !== 0) {\n                return (\n                  <tr>\n                    <td>{key}</td>\n                    <td>{value}</td>\n                    <td>1</td>\n                  </tr>\n                );\n              }\n            })}\n          {Object.keys(this.state.positions).length !== 0 &&\n            Object.entries(this.state.positions[\"Individual margin\"]).map(([key, value]) => {\n              if (value !== 0) {\n                return (\n                  <tr>\n                    <td>{key}</td>\n                    <td>{value}</td>\n                    <td>2</td>\n                  </tr>\n                );\n              }\n            })}\n        </tbody>\n      </Table>\n    </>\n  );\n\n  displaySelectedCategory = () => {\n    var [accountType, symbol] = this.state.selectedCategory.split(\"/\");\n    var activities = this.state.activities.slice();\n    if (this.state.selectedCategory !== \"\" && this.state.selectedCategory !== \"all\") {\n      activities = this.state.activities.filter(\n        (activity) => activity[1] === symbol && activity[4] === accountType\n      );\n    }\n    return (\n      <Table responsive striped bordered hover size=\"lg\">\n        <thead>\n          <tr>\n            <th>时间</th>\n            <th>名称</th>\n            <th>数量</th>\n            <th>价格</th>\n            <th>所属账户</th>\n          </tr>\n        </thead>\n        <tbody>\n          {activities.map(([date, symbol, qty, price, accountType]) => (\n            <tr>\n              <td>{date.substring(5, 10)}</td>\n              <td>{symbol}</td>\n              <td>{parseInt(qty)}</td>\n              <td>{parseFloat(price).toFixed(2)}</td>\n              <td>{accountType === \"Individual TFSA\" ? \"1\" : \"2\"}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    );\n  };\n\n  selectInspectingCategory = () => {\n    return (\n      <Form.Group>\n        <Form.Control\n          as=\"select\"\n          onChange={(e) => this.setState({ selectedCategory: e.target.value })}\n        >\n          <option value=\"all\">全部记录</option>\n          {Object.keys(this.state.positions[\"Individual TFSA\"]).map((position) => (\n            <option value={`Individual TFSA/${position}`}>{`1 ${position}`}</option>\n          ))}\n          {Object.keys(this.state.positions[\"Individual margin\"]).map((position) => (\n            <option value={`Individual margin/${position}`}>{`2 ${position}`}</option>\n          ))}\n        </Form.Control>\n      </Form.Group>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">{this.stockPositions()}</header>\n        <header className=\"App-header select\">{this.selectInspectingCategory()}</header>\n        <header className=\"App-header table--selectedCategory\">{this.displaySelectedCategory()}</header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}